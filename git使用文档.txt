git命令
一.创建本地代码库
1.在全英文路径下(有非英文的话有可能会出错)创建空文件夹(也可以不空)

2.使用git bash cd进入到该文件夹下输入git init
  注:Initialized empty Git repository in /Users/michael/learngit/.git/(成功的提示)

3.把需要提交的文件添加进来,可以添加很多, git add file2.txt file3.txt

4.提交,这一步一共做了2件事,一个是把前面add的所有文件提交上去,一个是在-m后面加入了本次提交的说明
  git commit -m "add +++"
  
5.git status查看当前的文件状态,可以看到有哪些文件被修改过了

6.git diff readme.txt  查看具体到某个文件修改了什么

7.git log 显示从最近到最远的提交日志

8.git log --pretty=oneline 精简版显示从最近到最远的提交日志

9.版本回退  git reset --hard HEAD^          git reset --hard HEAD~100
在Git中，用HEAD表示当前版本，也就是最新的提交1094adb...（注意我的提交ID和你的肯定不一样），
上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。

10.回退之后想回到最后提交的版本
  git reflog 查看之前所有的提交和回退命令动作,找到想要回去的版本号
  git reset --hard commit_id  将commit_id换成你想要回去的版本号
  
11.丢弃暂存的修改   git checkout -- readme.txt  

	一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
	一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
	总之，就是让这个文件回到最近一次git commit或git add时的状态。

12.	从git版本管理中删除文件  git rm test.txt

13.从git版本管理中checkout文件 git checkout -- test.txt

二.创建远程仓库(以在github创建远程仓库为例,具体参考https://www.liaoxuefeng.com/wiki/896043488029600/896954117292416)

1.关联仓库 git remote add origin git@github.com:laoyimou/git-test.git  (laoyimou是个人在github上的用户名,不要写错)

2.将本地内容推送到远程仓库  git push -u origin master,常规的是git push origin master

	把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。
	由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支
	内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。

	
3.从远程仓库克隆代码到本地
	git clone git@github.com:laoyimou/from-git
	(由于giubub用户名是唯一的,所以可以作为下载路径,公司内部的话,用户名应该由公司分配,避免个人重名)	
	
4.分支
	Git鼓励大量使用分支：

	查看分支：git branch

	创建分支：git branch <name>

	切换分支：git checkout <name>

	创建+切换分支：git checkout -b <name>

	合并分支1到当前分支：git merge <name>  (必须先切换到当前分支,然后才可以将某分支1合并过来)

	删除分支：git branch -d <name>	
	若分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用大写的-D参数 git branch -D <name>
	
5.分支合并冲突   git merge feature1  (feature1是分支名称)
	分支可以自由修改,但是最后分支肯定还是要合并到主分支的,这时候如果主分支修改了某些东西就会和分支产生冲突.
	
	git status 查看合并冲突的文件,以下举例,
	Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容，
	我们修改如下后保存：再提交合并,最后用git log可以查看合并情况,如果完成,本分支就功德圆满,就可以删除掉了 git branch -d <name>
	
	Git has a mutable index called stage.
	Git tracks changes of files.
	<<<<<<< HEAD
	Creating a new branch is quick & simple.
	=======
	Creating a new branch is quick AND simple.
	>>>>>>> feature1
	
6.分支管理策略,强制禁止使用fast forward模式,可以保留分支信息.
	由于git默认使用fast forward模式来合并分支,这种模式下如果删除分支的话会删除掉分支信息
	如果使用强制禁用fast forward模式来合并分支的话,合并时git会生成新的commit,这样即使删除掉分支,其信息也还会保留下来
	git merge --no-ff -m "merge with no-ff" dev  请注意--no-ff参数，表示禁用Fast forward：

7.	 git stash   当你有时候还不想提交代码,又想将当前的代码状态保存起来的时候,用这个命令就可以,
	 git stash list  查看保存记录
	 git stash apply 恢复最后一次保存的                 git stash apply stash@{0} 指定恢复某一次保存的   
	 git stash pop   恢复最后一次保存的并擦除记录      git stash pop stash@{0}    指定恢复某一次保存的并擦除记录   
 
8.	多人协作技巧

	要查看远程库分支的信息，用git remote 或者，用git remote -v显示更详细的信息.
	推送分支，就是把该分支上的所有本地提交推送到远程库。
	推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：
	git push origin dev  origin是远程的主分支,dev是本地的dev分支
	
	本地分支与远程分支绑定
	git branch --set-upstream-to=origin/dev dev  将本地的dev和远程的dev进行绑定,下次直接提交就是将本地dev提交到远程的dev
	如果是直接创建本地分支斌同时绑定远程分支  git checkout -b dev origin/dev
	
	git pull 提交代码前先进去代码合并,就是同步远程分支的最新代码到自己的本地代码上,看看有没有冲突,解决好之后在提交到远程分支
	解决后先git commit -m "fix env conflict",再 git push origin dev
	
	
	
	
	
	
	
	
	
	
	
